<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-3.0.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

	<bean id="jasyptStringDigester" class="org.jasypt.digest.StandardStringDigester">
		<property name="algorithm" value="SHA-1" />
		<property name="iterations" value="100000" />
	</bean>

	<!-- -->
	<!-- Configuration for encryptor, based on environment variables. -->
	<!-- -->
	<!-- In this example, the encryption password will be read from an -->
	<!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once -->
	<!-- the application has been started, could be safely unset. -->
	<!-- -->
	<bean id="environmentVariablesConfiguration"
		class="gambler.commons.util.jasypt.GBEnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="GB_ENCRYPTION_PASSWORD" />

	</bean>


	<!-- -->
	<!-- The will be the encryptor used for decrypting configuration values. -->
	<!-- -->
	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean>


	<!-- -->
	<!-- The EncryptablePropertyPlaceholderConfigurer will read the -->
	<!-- .properties files and make their values accessible as ${var} -->
	<!-- -->
	<!-- Our "configurationEncryptor" bean (which implements -->
	<!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg. -->
	<!-- -->

	<bean id="gb.placeholderConfig"
		class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>classpath:/datasource.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="user" value="${gb.datasource.userName}" />
		<property name="password" value="${gb.datasource.password}" />
		<property name="driverClass" value="${gb.datasource.driverClassName}" />
		<property name="jdbcUrl" value="${gb.datasource.url}" />
		<property name="initialPoolSize" value="${gb.datasource.initialSize}" />
		<property name="maxPoolSize" value="${gb.datasource.maxPoolSize}" />
		<property name="minPoolSize" value="${gb.datasource.minPoolSize}" />
		<property name="acquireIncrement" value="${gb.datasource.acquireIncrement}" />
		<property name="acquireRetryAttempts" value="${gb.datasource.acquireRetryAttempts}" />
		<property name="idleConnectionTestPeriod" value="${gb.datasource.idleConnectionTestPeriod}" />
		<property name="maxConnectionAge" value="${gb.datasource.maxConnectionAge}" />
		<property name="checkoutTimeout" value="${gb.datasource.checkoutTimeout}" />
		<property name="maxIdleTime" value="${gb.datasource.maxIdleTime}" />
		<property name="maxStatements" value="${gb.datasource.maxStatements}" />
		<property name="testConnectionOnCheckout" value="true" />
		<property name="preferredTestQuery" value="select 1 from ignore_this_table" />
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<tx:annotation-driven />

	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
		<property name="mappingResources">
			<list>
				<value>
					AuthDomains.hbm.xml
				</value>
			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">
					${gb.hibernate.dialect}
				</prop>
				<prop key="hibernate.show_sql">
					${gb.hibernate.show_sql}
				</prop>
				<prop key="hibernate.hbm2ddl.auto">
					${gb.hibernate.hbm2ddl.auto}
				</prop>
				<prop key="connection.autoReconnect">true</prop>
				<prop key="connection.autoReconnectForPools">true</prop>
				<prop key="connection.is-connection-validation-required">true</prop>
			</props>
		</property>
	</bean>


	<bean id="simpleHibernatePersistence"
		class="gambler.commons.persistence.hibernate.SimpleHibernatePersistence">
		<property name="sessionFactory">
			<ref local="sessionFactory" />
		</property>
	</bean>

	<context:annotation-config />

	<context:component-scan base-package="gambler.examples.webapp.*" />
</beans>
