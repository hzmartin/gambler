<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gambler.examples.webapp2.dao.AuthDao">

	<resultMap id="userMap" type="User">
		<result property="uid" column="uid" />
		<result property="userId" column="user_id" />
		<result property="nick" column="nick" />
		<result property="password" column="password" />
		<result property="dateJoined" column="date_joined" />
		<result property="lastLogin" column="last_login" />
		<result property="updateTime" column="update_time" />
		<result property="isactive" column="isactive" />
		<result property="issuper" column="issuper" />
	</resultMap>
    
    <select id="find" parameterType="string" resultMap="userMap">
    	select * from gb_user where user_id = #{userId}
    </select>
    
    <insert id="save" parameterType="User">
    	insert into gb_user 
    	(user_id, nick, password, isactive, issuper) 
    	values 
    	(#{userId,jdbcType=VARCHAR},
    	#{nick,jdbcType=VARCHAR},
    	#{password,jdbcType=VARCHAR},
    	#{isactive},
    	#{issuper})
    </insert>
    <update id="updatePassword" parameterType="User">
    		update gb_user 
    		set password=#{password}, update_time=CURRENT_TIMESTAMP
    		where user_id = #{userId}
    </update>
    <update id="updateUserActiveFlag" parameterType="User">
    		update gb_user 
    		set isactive=#{isactive}, update_time=CURRENT_TIMESTAMP
    		where user_id = #{userId}
    </update>
    <update id="updateUserSuperFlag" parameterType="User">
    		update gb_user 
    		set issuper=#{issuper}, update_time=CURRENT_TIMESTAMP
    		where user_id = #{userId}
    </update>
    
    <update id="update" parameterType="User">
    		update gb_user 
    		<trim prefix="SET" suffixOverrides=",">
    		<if test="nick != null">nick=#{nick},</if>
    		<if test="lastLogin != null">last_login=#{lastLogin},</if>
    		update_time=CURRENT_TIMESTAMP
    		</trim>
    		where user_id = #{userId}
    </update>
    
    <delete id="delete" parameterType="string">delete from gb_user where user_id = #{user_id}</delete>
    
    <select id="getAllPermissions" resultType="Permission">select * from gb_permission order by ptype, pid</select>
    <select id="getAllRolePermissions" resultType="RolePermission">select * from gb_role_permission</select>
    <select id="getAllRoles" resultType="Role">select * from gb_role</select>
    
    <select id="getUserRole" parameterType="UserRole" resultType="UserRole">
    	select * from gb_user_role where 
    	<where>
			<if test="uid != null">and uid=#{uid}</if>
			<if test="rid != null">and rid=#{rid}</if>
		</where>
	</select>
    <select id="getUserPermissions" parameterType="long" resultType="UserPermission">select * from gb_user_permission where uid=#{uid}</select>
    <select id="getUserPermission" parameterType="UserPermission" resultType="UserPermission">select * from gb_user_permission where uid=#{uid} and pid=#{pid}</select>
    <select id="getUserRolePermission" parameterType="UserPermission"  resultType="UserPermission">select a.uid, b.pid from gb_user_role a, gb_role_permission b where uid = #{uid} and a.rid = b.rid and b.pid = #{pid}</select>
    
    <insert id="createUserRole" parameterType="UserRole">insert into gb_user_role (uid, rid) values (#{uid}, #{rid})</insert>
    <insert id="createRolePermission" parameterType="RolePermission">insert into gb_role_permission (rid, pid) VALUES (#{rid}, #{pid})</insert>
    <insert id="createUserPermission" parameterType="UserPermission">insert into gb_user_permission (uid, pid) values (#{uid}, #{pid})</insert>
    <delete id="delUserPermission" parameterType="UserPermission">delete from gb_user_permission where uid = #{uid} and pid = #{pid}</delete>
    <delete id="delUserPermissions" parameterType="long">delete from gb_user_permission where uid = #{uid}</delete>
    <delete id="delUserRoles" parameterType="long">delete from gb_user_role where uid = #{uid}</delete>

	<insert id="addPermission" parameterType="Permission">insert into gb_permission(pid, name, ptype, remark) VALUES (#{pid}, #{name}, #{ptype}, #{remark})</insert>
	<delete id="delPermission" parameterType="long">delete from gb_permission where pid = #{pid}</delete>
	<delete id="delAllUserPermission" parameterType="long">delete from gb_user_permission where pid = #{pid}</delete>
	<update id="updatePermission" parameterType="Permission">
		update gb_permission
		<trim prefix="SET" suffixOverrides=",">
			<if test="name != null">name=#{name},</if>
			<if test="ptype != null">ptype=#{ptype},</if>
			<if test="remark != null">remark=#{remark},</if>
		</trim>
		where pid = #{pid}
	</update>
	
	<delete id="delAllRolePermission" parameterType="map">
		delete from gb_role_permission
			<where>
				<if test="rid != null">and rid=#{rid}</if>
				<if test="pid != null">and pid=#{pid}</if>
			</where>
	</delete>
	
	<insert id="addRole" parameterType="Role">insert into gb_role(rid, name, remark) VALUES (#{pid}, #{name}, #{remark})</insert>
	<delete id="delRole" parameterType="long">delete from gb_role where rid = #{rid}</delete>
	<update id="updateRole" parameterType="Role">
		update gb_role_permission
		<trim prefix="SET" suffixOverrides=",">
			<if test="name != null">name=#{name},</if>
			<if test="remark != null">remark=#{remark},</if>
		</trim>
		where rid = #{rid}
	</update>
</mapper>