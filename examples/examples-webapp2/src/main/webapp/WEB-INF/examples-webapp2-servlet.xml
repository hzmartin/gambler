<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
http://www.springframework.org/schema/context
http://www.springframework.org/schema/context/spring-context-2.5.xsd
http://www.springframework.org/schema/tx
http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
http://www.springframework.org/schema/aop
http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">
           
    <context:component-scan base-package="gambler.examples.webapp2">
		<context:include-filter type="regex"
			expression="gambler.examples.webapp2.service.*Service"/>
		<context:include-filter type="regex"
			expression="gambler.examples.webapp2.controller.*Controller"/>
	</context:component-scan>
    
    <bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringHttpMessageConverter" />
				<ref bean="mappingJacksonHttpMessageConverter" />
			</list>
		</property>
	</bean>
	<bean id="stringHttpMessageConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<!-- SpringMVC上传文件时，需要配置MultipartResolver处理器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 指定所上传文件的总大小不能超过1MB。注意maxUploadSize属性的限制不是针对单个文件，而是所有文件的容量之和 -->
		<property name="maxUploadSize" value="1048576" />
	</bean>
	
    <bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
	  <property name="definitions">
	    <list>
	      <value>/WEB-INF/defs/tiles.xml</value>
	    </list>
	  </property>
	</bean>
	
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
  		<property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
  		<property name="order" value="1" />
	</bean>

	<!-- freemarker config -->
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
	  <property name="templateLoaderPath" value="/WEB-INF/freemarker/"/>
	  <property name="freemarkerVariables">
	    <map>
	      <entry key="xml_escape" value-ref="fmXmlEscape"/>
	    </map>
	  </property>
	</bean>
	
	<bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
	<!--
	
	  View resolvers can also be configured with ResourceBundles or XML files. If you need
	  different view resolving based on Locale, you have to use the resource bundle resolver.
	
	-->
	<bean id="freemarkerResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
	  <property name="cache" value="true"/>
	  <property name="prefix" value=""/>
	  <property name="suffix" value=".ftl"/>
	  <property name="order" value="2" />
	</bean>
	
    <bean id="viewResolver"
        class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <property name="viewClass"
            value="org.springframework.web.servlet.view.JstlView" />
        <property name="prefix" value="/jsp/" />
        <property name="suffix" value=".jsp" />
    </bean>
    
    <bean id="jasyptStringDigester" class="org.jasypt.digest.StandardStringDigester">
		<property name="algorithm" value="SHA-1" />
		<property name="iterations" value="100000" />
	</bean>

	<!-- -->
	<!-- Configuration for encryptor, based on environment variables. -->
	<!-- -->
	<!-- In this example, the encryption password will be read from an -->
	<!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once -->
	<!-- the application has been started, could be safely unset. -->
	<!-- -->
	<bean id="environmentVariablesConfiguration"
		class="gambler.commons.util.jasypt.GBEnvironmentStringPBEConfig">
		<property name="algorithm" value="PBEWithMD5AndDES" />
		<property name="passwordEnvName" value="GB_ENCRYPTION_PASSWORD" />

	</bean>


	<!-- -->
	<!-- The will be the encryptor used for decrypting configuration values. -->
	<!-- -->
	<bean id="configurationEncryptor" class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor">
		<property name="config" ref="environmentVariablesConfiguration" />
	</bean>


	<!-- -->
	<!-- The EncryptablePropertyPlaceholderConfigurer will read the -->
	<!-- .properties files and make their values accessible as ${var} -->
	<!-- -->
	<!-- Our "configurationEncryptor" bean (which implements -->
	<!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg. -->
	<bean id="gb.placeholderConfig"
		class="org.jasypt.spring.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>classpath:/datasource.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		destroy-method="close">
		<property name="user" value="${gb.datasource.userName}" />
		<property name="password" value="${gb.datasource.password}" />
		<property name="driverClass" value="${gb.datasource.driverClassName}" />
		<property name="jdbcUrl" value="${gb.datasource.url}" />
		<property name="initialPoolSize" value="${gb.datasource.initialSize}" />
		<property name="maxPoolSize" value="${gb.datasource.maxPoolSize}" />
		<property name="minPoolSize" value="${gb.datasource.minPoolSize}" />
		<property name="acquireIncrement" value="${gb.datasource.acquireIncrement}" />
		<property name="acquireRetryAttempts" value="${gb.datasource.acquireRetryAttempts}" />
		<property name="idleConnectionTestPeriod" value="${gb.datasource.idleConnectionTestPeriod}" />
		<property name="maxConnectionAge" value="${gb.datasource.maxConnectionAge}" />
		<property name="checkoutTimeout" value="${gb.datasource.checkoutTimeout}" />
		<property name="maxIdleTime" value="${gb.datasource.maxIdleTime}" />
		<property name="maxStatements" value="${gb.datasource.maxStatements}" />
		<property name="testConnectionOnCheckout" value="true" />
		<property name="preferredTestQuery" value="select 1 from ignore_this_table" />
	</bean>
	
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="processPropertyPlaceHolders" value="true"/>
		<property name="annotationClass"
			value="org.springframework.stereotype.Repository"/>
		<property name="basePackage" value="gambler.examples.webapp2.dao"/>
	</bean>
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="mapperLocations" value="classpath*:sqlmap/*.xml" />
		<property name="configLocation" value="classpath:mybatis-config.xml"/>
		<property name="dataSource" ref="dataSource"/>
	</bean>
	
	<tx:annotation-driven transaction-manager="txManager" />
	
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
  	    <property name="dataSource" ref="dataSource"/>
    </bean>
</beans>
